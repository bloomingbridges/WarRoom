package {		import flash.display.Sprite;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		public class WarRoom extends Sprite {				private const WAITING = 0;		private const LOCKED = 1;		private var state:int;		private var map:MapGenerator;		private var prompt:Sprite;				public function WarRoom() {						map = new MapGenerator(2);			addChild(map);			stage.addEventListener(KeyboardEvent.KEY_UP, onBuzzerPress);		}		private function onBuzzerPress(e:KeyboardEvent):void {			switch (state) {				case WAITING:					var target:Point = map.lockDownCurrentPosition();					drawPrompt();					goState(LOCKED);					break;				case LOCKED:					// Only listen for ESC key presses					//if (e.keyCode === Keyboard.ESCAPE) {						map.unlock();						removeChild(prompt);						goState(WAITING);					//}					break;			}		}		private function drawPrompt(pW:int = 100, pH:int = 40):void {						var properties = map.getBlockProperties();			var block:BlockUnit;			var contour:Boolean;			prompt = new Sprite();			for (var i=0; i<pH; i++) {				for (var j=0; j<pW; j++) {					contour = (j == 0 || j == pW - 1 || i == 0 || i == pH - 1) ? true: false;					block = new BlockUnit(contour);					block.x = j * ( properties.width + properties.spacing );					block.y = i * ( properties.height + properties.spacing );					prompt.addChild(block);				}			}			addChild(prompt);			prompt.y = 100 + ( 32 * (properties.height + properties.spacing) );			prompt.x = (stage.stageWidth / 2) - ( ( pW * (properties.width + properties.spacing) - properties.spacing ) / 2 );			prompt.alpha = 0.8;		}		private function goState(s:int):void {			state = s;			trace("=== State is now: " + state);		}	}	}