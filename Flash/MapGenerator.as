package  {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.geom.Point;	import flash.utils.Timer;		public class MapGenerator extends Sprite {				public  var spacing:Number = 1;		private var mapData:Array;		private var nrows:int = 143;		private var ncols:int = 360;		private var blocks:Array;		private var lastDestination:Point;		private var shuffle:Timer;				public function MapGenerator() {						var myLoader:URLLoader = new URLLoader();			myLoader.addEventListener(Event.COMPLETE, onDataLoaded);			myLoader.load(new URLRequest("glp00ag60.asc"));						lastDestination = new Point(0,0);			shuffle = new Timer(500, 0);			shuffle.addEventListener(TimerEvent.TIMER, pickNewDestination);					}				private function onDataLoaded(e:Event):void {			var popData:Array = e.target.data.split(/\n/);			popData.splice(0,6);			mapData = popData;			generateMap();			centreMap();			shuffle.start();		}				private function generateMap():void {			blocks = new Array(nrows);			var values:Array = new Array();			for (var i=0; i<=nrows; i++) {				values = mapData[i].split(' ');				blocks[i] = new Array();				for (var j=0; j<=ncols; j++) {					var block:MapUnit = new MapUnit(values[j]);					block.y = i * (block.h + spacing);					block.x = j * (block.w + spacing);					blocks[i].push(block);					addChild(block);				}			}		}		private function centreMap():void {			var mapWidth:int = (ncols*(blocks[0][0].w+spacing)) - spacing;			if (stage.stageWidth > mapWidth)				x = (stage.stageWidth - mapWidth) / 2;			else				x = (stage.stageWidth/2) - (mapWidth / 2);			x = Math.floor(x);			y = 100;		}		public function pickNewDestination(e:TimerEvent):void {			var x:int = Math.floor( Math.random() * nrows );			var y:int = Math.floor( Math.random() * ncols );			blocks[lastDestination.x][lastDestination.y].deselect();			lastDestination = new Point( x , y );			blocks[x][y].select();		}			}	}